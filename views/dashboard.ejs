<script src="/js/d3.js"></script>
<script src="/js/d3.layout.js"></script>
<style type="text/css">
    text {
        font-size: 13.7px;
    }
    .toolTip {
        position: absolute;
        display: none;
        width: auto;
        height: auto;
        background: none repeat scroll 0 0 white;
        border: 0 none;
        border-radius: 8px 8px 8px 8px;
        color: black;
        font: 12px sans-serif;
        padding: 5px;
        text-align: center;
    }
    /* .container {
    max-width: 1270px;
    margin: 0 auto;
} */
</style>
<div class='ui container'>
        
        <div class='ui stackable grid'>
            <div class="ui row">
                <div class='ui sixteen wide column'>
                    
                    <div class='ui center aligned basic segment'>
                        <div class="ui horizontal divider header">
                            <a href="/org/<%=req.org.id%>/dashboard/?month=<%=prev%>">
                                <i class="angle left icon big"></i>
                            </a>
                            
                                <%=req.query.month?req.query.month:(req.query.year?req.query.year:new Date().toISOString().substring(0,7))%>
                            
                            <a href="/org/<%=req.org.id%>/dashboard/?month=<%=next%>">
                                <i class="angle right icon big"> </i>
                            </a>
                        </div>
                    </div>
                </div>
            </div>
            <div class="ui row">
                <div class='ui sixteen wide column'>
                    <div class="ui fluid three cards">
                        <div class="card">
                            <div class="content">
                                <div class="header">
                                Transactions
                                </div>
                                <div class="meta">
                                Action items
                                </div>
                                <div class="description">
                                <div class="ui unordered list">
                                    <a class="item" target="_blank" href="/org/<%=req.org.id%>/transactions?category=empty&date_from=<%-start_of_month.toISOString().substring(0,10)%>&date_to=<%-end_of_month.toISOString().substring(0,10)%>"><span><i class="warning circle icon"></i><%=tlis_without_category%> transactions without category<i class="external alternate icon"></i></span></a>
                                    <a class="item" target="_blank" href="/org/<%=req.org.id%>/transactions?description=empty&date_from=<%-start_of_month.toISOString().substring(0,10)%>&date_to=<%-end_of_month.toISOString().substring(0,10)%>"><span><i class="warning circle icon"></i><%=tlis_without_description%> transactions without description<i class="external alternate icon"></i></span></a>
                                </div>
                                </div>
                            </div>
                        </div>
                        <div class="card">
                            <div class="content">
                                <div class="header">
                                Invoices
                                </div>
                                <div class="meta">
                                Action items
                                </div>
                                <div class="description">
                                    <div class="ui unordered list">
                                        <a class="item" target="_blank" href="/org/<%=req.org.id%>/invoices?date_from=<%-start_of_month.toISOString().substring(0,10)%>&date_to=<%-end_of_month.toISOString().substring(0,10)%>"><span><i class="warning circle icon"></i><%=invoice_without_category%> Invoices without category<i class="external alternate icon"></i></span></a>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="card">
                            <div class="content">
                                <div class="header">
                                Statements
                                </div>
                                <div class="meta">
                                Action items
                                </div>
                                <div class="description">
                                    <div class="ui unordered list">
                                        <% accounts_for_which_statements_missing.forEach(function(account){%>
                                            <a class="item" target="_blank" href="/org/<%=req.org.id%>/document/create"><span><i class="warning circle icon"></i>Statement missing for <%=account.name%><i class="external alternate icon"></i></span></a>
                                        <%})%>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class='ui row'>
                <div class='ui five wide column'>
                    <div class='ui segment'>
                        <h3>List of accounts</h3>
                        <div class="ui relaxed divided list">
                            <%accounts.forEach(function(account){%>
                                <div class="item">
                                    <i class=" book middle aligned icon"></i>
                                    <div class="content">
                                        <a class="header" href='/org/<%=req.org.id%>/account/<%=account.id%>'><%=account.name%></a>
                                        <%if(account.details && account.details.last_snapshot){%>
                                            <div class="description popup" data-content='Balance in the account as per last snapshot - <%=GeneralService.timeAgo(account.updatedAt)%>'>Rs. <%=account.details.last_snapshot.balance%> (<%=GeneralService.timeAgo(account.updatedAt)%>)</div>
                                        <%}else{%>
                                            <div class="description popup" data-content='Balance in account is the balance in the last known snapshot taken of the account. This account does not seem to have a snapshot. Create a snapshot to show balance here '>Balance unknown</div>
                                        <%}%>
                                    </div>
                                </div>
                            <%})%>
                        </div>
                    </div>
                </div>
                <div class='ui eleven wide column'>
                    <div class='ui fluid segment'>
                        <div class='ui header'>Expense per category</div>
                            <div id="category_treemap"></div>
                    </div>
                </div>
            </div>
            <div class='ui row'>
                <div class='ui sixteen wide column'>
                    <div class='ui segment'>
                        <div class='ui header'>Income & Expense</div>
                        <div style="width:100%;">
                            <canvas id="canvas"></canvas>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <a class="circular ui icon right floated primary big button" href="/org/<%=req.org.id%>/transaction/create" style="position:fixed;top:auto;left:auto;right:20px;bottom:20px;display:;" data-tooltip="Add new transaction" data-position="left center" data-inverted=""><i class="icon question"></i></a>
    <script type="text/javascript">
        $(document).ready(function(){
            $('.ui.accordion').accordion();
        })
    </script>
    
    
    
    <style>
        canvas{
            -moz-user-select: none;
            -webkit-user-select: none;
            -ms-user-select: none;
        }
    </style>
    <%if(typeof chart !='undefined'){%>
    <script>
        window.chartColors = {
            red: 'rgb(255, 99, 132)',
            orange: 'rgb(255, 159, 64)',
            yellow: 'rgb(255, 205, 86)',
            green: 'rgb(75, 192, 192)',
            blue: 'rgb(54, 162, 235)',
            purple: 'rgb(153, 102, 255)',
            grey: 'rgb(201, 203, 207)'
        };
        var color = Chart.helpers.color;
        var config = {
            type: 'line',
            data: {
                labels: <%-JSON.stringify(chart.x)%>,
                datasets: [{
                    label: 'Expense',
                    backgroundColor: color(window.chartColors.red).alpha(0.7).rgbString(),
                    borderColor: window.chartColors.red,
                    data: [
                        <%-chart.y_expense%>
                    ],
                    fill: true,
                },
                {
                    label: 'Income',
                    backgroundColor: color(window.chartColors.green).alpha(0.7).rgbString(),
                    borderColor: window.chartColors.green,
                    data: [
                        <%-chart.y_income%>
                    ],
                    fill: true,
                }]
            },
            options: {
                responsive: true,
                title: {
                    display: false,
                    text: 'Expense'
                },
                tooltips: {
                    mode: 'index',
                    intersect: false,
                },
                hover: {
                    mode: 'nearest',
                    intersect: true
                },
                scales: {
                    xAxes: [{
                        display: true,
                        scaleLabel: {
                            display: true,
                            labelString: 'Day'
                        }
                    }],
                    yAxes: [{
                        display: true,
                        scaleLabel: {
                            display: true,
                            labelString: 'Value'
                        },
                        ticks: {
                                beginAtZero: true,
                                stepSize: 20000
                        }
                    }]
                }
            }
        };
        window.onload = function() {
            var ctx = document.getElementById('canvas').getContext('2d');
            window.myLine = new Chart(ctx, config);
        };
        $(document).ready(function(){
            $('.popup').popup();
            $('#setup').progress();
            category_draw()
            d3.select(window).on("resize", function () { 
                console.log('resize');
                $("#category_treemap").empty();
                category_draw() });
            $('.show_hide_setup.icon').click(function(){
                $(this).removeClass('chevron circle').addClass('chevron circle').toggleClass('up down').addClass('icon');
                $('.setup_detail').toggle();
            });
            $('.create_categories').click(function(){
                var categories_to_add = [];
                if($('#cat_eating_out').is(":checked"))
                    categories_to_add.push({
                        name: 'Eating Out',
                        budget: 10000,
                        description: '-'
                    })
                if($('#cat_rent').is(":checked"))
                    categories_to_add.push({
                        name: 'Rent',
                        budget: 20000,
                        description: '-'
                    });
                if($('#cat_grocery').is(":checked"))
                    categories_to_add.push({
                        name: 'Grocery',
                        budget: 5000,
                        description: '-'
                    })
                if($('#cat_gift').is(":checked"))
                    categories_to_add.push({
                        name: 'Gift',
                        budget: 5000,
                        description: '-'
                    })
                if($('#cat_commute').is(":checked"))
                    categories_to_add.push({
                        name: 'Commute',
                        budget: 7000,
                        description: '-'
                    })
                
                $.ajax({
                    type: 'POST',
                    url: '/org/<%=req.org.id%>/category/create',
                    data: JSON.stringify(categories_to_add),
                    contentType: "application/json",
                    dataType: 'json',
                    success: function(resultData) { 
                    window.location.replace('/org/<%=req.org.id%>/categories'); }
                })
                
            })
        })
        function category_draw(){
            var w = $("#category_treemap").width(),
                h;
            if (w < 580) {
                h = w * 1;
                // otherwise it's more of a rectangle
            } else {
                h = w * 0.45;
            }
            var x = d3.scale.linear().range([0, w]),
                y = d3.scale.linear().range([0, h]),
                d3color = d3.scale.category20c(),
                root,
                node;
        

            var treemap = d3.layout.treemap()
                .round(false)
                .size([w, h])
                .sticky(true)
                .value(function (d) { return d.t_sum; });

            var svg = d3.select("#category_treemap").append("div")
                .attr("class", "chart")
                .style("width", w + "px")
                .style("height", h + "px")
                .append("svg:svg")
                .attr("width", w)
                .attr("height", h)
                .append("svg:g")
                .attr("transform", "translate(.5,.5)");

            node = root = <%-JSON.stringify({name:'categories', children: categories})%>;

            var nodes = treemap.nodes(root)
                .filter(function (d) { return d.parent && d.super_sum > 0 ; });
            
            var tool = d3.select("body").append("div").attr("class", "toolTip");

            var cell = svg.selectAll("g")
                .data(nodes)
                .enter().append("svg:g")
                .attr("class", "cell")
                .attr("transform", function (d) { return "translate(" + d.x + "," + d.y + ")"; })
                .on("click", function (d) { return zoom(node == d.parent ? root : d.parent); })
                .on("mousemove", function (d) {
                    console.log('mouse moved');
                    tool.style("left", d3.event.pageX + 10 + "px")
                    tool.style("top", d3.event.pageY - 20 + "px")
                    tool.style("display", "inline-block");
                    tool.html(`${d.name}<br><b>spent: </b><span style="color:${d.super_sum > d.budget?'red':'green'};">${d.super_sum}</span><br><b>budget:</b> ${d.budget}`);
                }).on("mouseout", function (d) {
                    tool.style("display", "none");
                });;

            cell.append("svg:rect")
                .attr("width", function (d) { return d.dx - 1; })
                .attr("height", function (d) { return d.dy - 1; })
                .style("fill", function (d) { return d3color(d.parent.name); });

            cell.append("svg:text")
                .attr("x", function (d) { return d.dx / 2; })
                .attr("y", function (d) { return d.dy / 2; })
                .attr("dy", ".35em")
                .attr("text-anchor", "middle")
                .text(function (d) { return d.name; })
                .style("opacity", function (d) { d.w = this.getComputedTextLength(); return d.dx > d.w ? 1 : 0; });

            d3.select(window).on("click", function () { zoom(root); });
            d3.select("select").on("change", function () {
                treemap.value(this.value == "size" ? size : count).nodes(root);
                zoom(node);
            });
            function size(d) {
                return d.t_sum;
            }
            function count(d) {
                return 1;
            }
            function zoom(d) {
                var kx = w / d.dx, ky = h / d.dy;
                x.domain([d.x, d.x + d.dx]);
                y.domain([d.y, d.y + d.dy]);

                var t = svg.selectAll("g.cell").transition()
                    .duration(d3.event.altKey ? 7500 : 750)
                    .attr("transform", function (d) { return "translate(" + x(d.x) + "," + y(d.y) + ")"; });

                t.select("rect")
                    .attr("width", function (d) { return kx * d.dx - 1; })
                    .attr("height", function (d) { return ky * d.dy - 1; })

                t.select("text")
                    .attr("x", function (d) { return kx * d.dx / 2; })
                    .attr("y", function (d) { return ky * d.dy / 2; })
                    .style("opacity", function (d) { return kx * d.dx > d.w ? 1 : 0; });

                node = d;
                d3.event.stopPropagation();
            }
    }
    
    </script>
    <%}%>